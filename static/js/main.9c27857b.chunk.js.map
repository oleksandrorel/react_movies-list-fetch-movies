{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","api/newMovie.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","getMovie","movieTitle","url","fetch","options","then","res","json","FindMovie","addMovie","duplicatedMovie","setDuplicatedMovie","useState","setMovie","query","setQuery","movieFound","setMovieFound","loadMovie","a","loadedMovie","Response","newMovie","Title","Plot","Poster","imdbID","onSubmit","e","preventDefault","htmlFor","type","id","placeholder","classnames","value","onChange","target","disabled","onClick","App","data","setMovies","some","mov","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9c27857b.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","\nconst BASE_URL = 'http://www.omdbapi.com';\n\nconst request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then(res => res.json());\n\nexport const getMovie = movieTitle => request(\n  `/?apikey=20efd394&t=${movieTitle}`,\n);\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api/newMovie';\n\nexport const imdbUrl = 'https://www.imdb.com/title/';\n\nexport const FindMovie = ({\n  addMovie,\n  duplicatedMovie,\n  setDuplicatedMovie,\n}) => {\n  const [movie, setMovie] = useState({});\n  const [query, setQuery] = useState('');\n  const [movieFound, setMovieFound] = useState(true);\n\n  const loadMovie = async() => {\n    setMovie({});\n\n    const loadedMovie = await getMovie(query);\n\n    if (loadedMovie.Response === 'False') {\n      setMovieFound(false);\n\n      return;\n    }\n\n    const newMovie = {\n      title: loadedMovie.Title,\n      description: loadedMovie.Plot,\n      imgUrl: loadedMovie.Poster,\n      imdbUrl: `${imdbUrl}${loadedMovie.imdbID}`,\n      imdbId: loadedMovie.imdbID,\n    };\n\n    setMovieFound(true);\n    setMovie(newMovie);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    loadMovie();\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classnames('input',\n                { 'is-danger': movieFound === false })}\n              value={query}\n              onChange={(e) => {\n                setQuery(e.target.value);\n                setDuplicatedMovie(false);\n              }}\n            />\n          </div>\n\n          {!movieFound\n            && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n            )}\n\n          {duplicatedMovie\n            && (\n            <p className=\"help is-danger\">\n              Movie already added to the list of movies\n            </p>\n            )}\n\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-light\"\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              disabled={!query || !movie.imdbId}\n              onClick={() => {\n                addMovie(movie);\n                setQuery('');\n              }}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {movie.imdbId\n        && (\n        <div className=\"container\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard\n            title={movie.title}\n            description={movie.description}\n            imgUrl={movie.imgUrl}\n            imdbUrl={`${imdbUrl}${movie.imdbId}`}\n          />\n        </div>\n        )\n      }\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n  duplicatedMovie: PropTypes.bool.isRequired,\n  setDuplicatedMovie: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(data);\n  const [duplicatedMovie, setDuplicatedMovie] = useState(false);\n\n  const addMovie = (movie) => {\n    const isMoviePresented = movies.some(mov => movie.imdbId === mov.imdbId);\n\n    if (isMoviePresented) {\n      setDuplicatedMovie(true);\n\n      return;\n    }\n\n    setMovies(prevMovies => ([...prevMovies, movie]));\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={addMovie}\n          duplicatedMovie={duplicatedMovie}\n          setDuplicatedMovie={setDuplicatedMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}